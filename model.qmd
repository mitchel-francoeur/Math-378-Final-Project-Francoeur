---
title: "Model"
format:
  html:
    code-fold: true
---

```{r}
library(reticulate)
```

```{python}
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
```

## Get Data

```{python}
df = penguins.load_penguins().dropna()

df.head(3)
```

## Define Model and Fit

```{python}
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']

model = LinearRegression().fit(X, y)
```

## Get some information

```{python}
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
```

## Lab 2

```{r}
library(vetiver)
#py_install("vetiver")
```

```{r}
install.packages("remotes")
library(remotes)
```

```{python}
from vetiver import VetiverModel

# Create a VetiverModel object
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)

```

```{python}
from vetiver import VetiverAPI

app = VetiverAPI(v, check_prototype = True)
```

```{python}
from pins import board_folder
from vetiver import vetiver_pin_write

b = board_folder('data/model', allow_pickle_read=True) 
vetiver_pin_write(b,v)
```

```{python}
app = VetiverAPI(v, check_prototype=True)
```

```{python}
# COMMENT OUT WHEN YOU NEED TO RENDER 
#app.run(port = 8080)
```

## Lab 6

```{python}
import os
from vetiver import prepare_docker

# Define the output directory
output_dir = 'docker_output'

# Ensure the output directory exists
os.makedirs(output_dir, exist_ok=True)

# Call prepare_docker function with the correct arguments
#prepare_docker(b, "penguin_model", output_dir=output_dir)
```

## Lab 3

```{r}
install.packages("DBI")
library(DBI)
```

```{r}
con <- dbConnect(duckdb(), dbdir = "my-db.duckdb", read_only = FALSE)

result <- dbSendQuery(con, "SELECT * FROM penguins")
df <- dbFetch(result)
dbClearResult(result)

df <- na.omit(df)

dbDisconnect(con)
```

```{python}
import duckdb
from palmerpenguins import penguins

con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
```

```{python}
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
```
